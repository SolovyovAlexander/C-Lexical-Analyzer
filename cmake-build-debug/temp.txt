include <stdio.h>#include<stdlib.h>#include"token.h"#include"string.h"structCToken*get_next_token(char*file_name){charch;FILE*fp;fp=fopen(file_name,"r");//readmodeif(fp==NULL){perror("Errorwhileopeningthefile.\n");exit(EXIT_FAILURE);}printf("Thecontentsof%sfileare:\n",file_name);while((ch=fgetc(fp))!=EOF){printf("%c",ch);}fclose(fp);return0;}voiddefine_token(char*str){}intis_keyword(char*str){charkeywords[32][9]={"auto","break","case","char","const","continue","default","do","double","else","enum","extern","float","for","goto","if","int","long","register","return","short","signed","sizeof","static","struct","switch","typedef","union","unsigned","void","volatile","while"};for(inti=0;i<32;++i){if(strcmp(keywords[i],str)==0){return1;}}return0;}intis_operator(constchar*ch){if(*ch=='!'){if(*(ch+1)=='='){returnTK_CODE_NOT_EQUAL;}else{returnTK_CODE_NOT;}}elseif(*ch=='%'){if(*(ch+1)=='='){returnTK_CODE_MOD_EQUAL;}else{returnTK_CODE_MOD;}}elseif(*ch=='^'){if(*(ch+1)=='='){returnTK_CODE_POWER_EQUAL;}else{returnTK_CODE_POWER;}}elseif(*ch=='&'){if(*(ch+1)=='='){returnTK_CODE_AND_EQUAL;}elseif(*(ch+1)=='&'){returnTK_CODE_AND_AND;}else{returnTK_CODE_BITWISE_AND;}}elseif(*ch=='*'){if(*(ch+1)=='='){returnTK_CODE_MULTIPLICATION_EQUAL;}else{returnTK_CODE_MULTIPLICATION;}}elseif(*ch=='-'){if(*(ch+1)=='='){returnTK_CODE_MINUS_EQUAL;}elseif(*(ch+1)=='-'){if(*(ch+2)=='>'){returnTK_CODE_IMPLICATION;}else{returnTK_CODE_DECREMENT;}}else{returnTK_CODE_MINUS;}}elseif(*ch=='+'){if(*(ch+1)=='='){returnTK_CODE_PLUS_EQUAL;}elseif(*(ch+1)=='+'){returnTK_CODE_INCREMENT;}else{returnTK_CODE_PLUS;}}elseif(*ch=='='){if(*(ch+1)=='='){returnTK_CODE_EQUAL_EQUAL;}else{returnTK_CODE_EQUAL;}}elseif(*ch=='~'){returnTK_CODE_TILDE;}elseif(*ch=='|'){if(*(ch+1)=='='){returnTK_CODE_OR_EQUAL;}elseif(*(ch+1)=='|'){returnTK_CODE_OR_OR;}else{returnTK_CODE_BITWISE_OR;}}elseif(*ch=='.'){if(*(ch+1)=='.'&&*(ch+2)=='.'){returnTK_CODE_ELLIPSIS;}else{returnTK_CODE_DIRECT_SELECTION;}}elseif(*ch=='<'){if(*(ch+1)=='='){returnTK_CODE_LESS_EQUAL;}elseif(*(ch+1)=='<'){if(*(ch+2)=='='){returnTK_CODE_SHIFT_LEFT_EQUAL;}else{returnTK_CODE_SHIFT_LEFT;}}else{returnTK_CODE_LESS;}}elseif(*ch=='>'){if(*(ch+1)=='='){returnTK_CODE_GREATER_EQUAL;}elseif(*(ch+1)=='>'){if(*(ch+2)=='='){returnTK_CODE_SHIFT_RIGHT_EQUAL;}else{returnTK_CODE_SHIFT_RIGHT;}}else{returnTK_CODE_GREATER;}}elseif(*ch=='/'){if(*(ch+1)=='='){returnTK_CODE_DIVISION_EQUAL;}else{returnTK_CODE_DIVISION;}}elseif(*ch=='?'){returnTK_CODE_QUESTION;}elseif(*ch=='('){returnTK_CODE_OPEN_BRACKET;}elseif(*ch==')'){returnTK_CODE_CLOSE_BRACKET;}elseif(*ch=='['){returnTK_CODE_SQUARE_OPEN_BRACKET;}elseif(*ch==']'){returnTK_CODE_SQUARE_CLOSE_BRACKET;}elseif(*ch=='{'){returnTK_CODE_FIGURE_OPEN_BRACKET;}elseif(*ch=='}'){returnTK_CODE_FIGURE_CLOSE_BRACKET;}elseif(*ch==','){returnTK_CODE_COMMA;}elseif(*ch==';'){returnTK_CODE_SEMICOLON;}elseif(*ch==':'){returnTK_CODE_COLON;}return0;}